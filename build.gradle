buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1"
    }
}



apply plugin: 'java'
//apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.palantir.docker"

group 'ch.mlz.preg'
version '0.1.0-SNAPSHOT'


repositories {
    mavenCentral()
}



// set to true if you want to generate the normal (not only boot jar) as well
jar {
    enabled = false
}



bootJar {
    classifier = 'boot'
    baseName = 'preg'
}

sourceCompatibility = 11.0


test {
    useJUnitPlatform()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile "org.eclipse.jetty:jetty-webapp:9.+"
    //compile "org.eclipse.jetty:jetty-jsp:9.+"
    //compile 'io.reactivex.rxjava:rxjava:2.2.8'

    testCompile("org.springframework.boot:spring-boot-starter-test")


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

/*def dockerContext = "./docker"
def appPath= "jars"

task copyJar(type: Copy){
    println(" copying $bootJar.archivePath to docker context")
    from file("$bootJar.archivePath")

    into file("$dockerContext/$appPath")
}

build.finalizedBy(copyJar)
*/
